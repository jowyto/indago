<?php


/**
 * Base class that represents a query for the 'dataset' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Sat Dec 14 11:43:01 2013
 *
 * @method DatasetQuery orderById($order = Criteria::ASC) Order by the id column
 * @method DatasetQuery orderByDataset($order = Criteria::ASC) Order by the dataset column
 * @method DatasetQuery orderByUrl($order = Criteria::ASC) Order by the url column
 * @method DatasetQuery orderByDescripcion($order = Criteria::ASC) Order by the descripcion column
 * @method DatasetQuery orderByTags($order = Criteria::ASC) Order by the tags column
 * @method DatasetQuery orderByFormatoId($order = Criteria::ASC) Order by the formato_id column
 * @method DatasetQuery orderByCompresionId($order = Criteria::ASC) Order by the compresion_id column
 * @method DatasetQuery orderByCabeceras($order = Criteria::ASC) Order by the cabeceras column
 * @method DatasetQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 *
 * @method DatasetQuery groupById() Group by the id column
 * @method DatasetQuery groupByDataset() Group by the dataset column
 * @method DatasetQuery groupByUrl() Group by the url column
 * @method DatasetQuery groupByDescripcion() Group by the descripcion column
 * @method DatasetQuery groupByTags() Group by the tags column
 * @method DatasetQuery groupByFormatoId() Group by the formato_id column
 * @method DatasetQuery groupByCompresionId() Group by the compresion_id column
 * @method DatasetQuery groupByCabeceras() Group by the cabeceras column
 * @method DatasetQuery groupByCreatedAt() Group by the created_at column
 *
 * @method DatasetQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method DatasetQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method DatasetQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method DatasetQuery leftJoinFormato($relationAlias = null) Adds a LEFT JOIN clause to the query using the Formato relation
 * @method DatasetQuery rightJoinFormato($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Formato relation
 * @method DatasetQuery innerJoinFormato($relationAlias = null) Adds a INNER JOIN clause to the query using the Formato relation
 *
 * @method DatasetQuery leftJoinCompresion($relationAlias = null) Adds a LEFT JOIN clause to the query using the Compresion relation
 * @method DatasetQuery rightJoinCompresion($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Compresion relation
 * @method DatasetQuery innerJoinCompresion($relationAlias = null) Adds a INNER JOIN clause to the query using the Compresion relation
 *
 * @method Dataset findOne(PropelPDO $con = null) Return the first Dataset matching the query
 * @method Dataset findOneOrCreate(PropelPDO $con = null) Return the first Dataset matching the query, or a new Dataset object populated from the query conditions when no match is found
 *
 * @method Dataset findOneById(int $id) Return the first Dataset filtered by the id column
 * @method Dataset findOneByDataset(string $dataset) Return the first Dataset filtered by the dataset column
 * @method Dataset findOneByUrl(string $url) Return the first Dataset filtered by the url column
 * @method Dataset findOneByDescripcion(string $descripcion) Return the first Dataset filtered by the descripcion column
 * @method Dataset findOneByTags(string $tags) Return the first Dataset filtered by the tags column
 * @method Dataset findOneByFormatoId(int $formato_id) Return the first Dataset filtered by the formato_id column
 * @method Dataset findOneByCompresionId(int $compresion_id) Return the first Dataset filtered by the compresion_id column
 * @method Dataset findOneByCabeceras(string $cabeceras) Return the first Dataset filtered by the cabeceras column
 * @method Dataset findOneByCreatedAt(string $created_at) Return the first Dataset filtered by the created_at column
 *
 * @method array findById(int $id) Return Dataset objects filtered by the id column
 * @method array findByDataset(string $dataset) Return Dataset objects filtered by the dataset column
 * @method array findByUrl(string $url) Return Dataset objects filtered by the url column
 * @method array findByDescripcion(string $descripcion) Return Dataset objects filtered by the descripcion column
 * @method array findByTags(string $tags) Return Dataset objects filtered by the tags column
 * @method array findByFormatoId(int $formato_id) Return Dataset objects filtered by the formato_id column
 * @method array findByCompresionId(int $compresion_id) Return Dataset objects filtered by the compresion_id column
 * @method array findByCabeceras(string $cabeceras) Return Dataset objects filtered by the cabeceras column
 * @method array findByCreatedAt(string $created_at) Return Dataset objects filtered by the created_at column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseDatasetQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseDatasetQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Dataset', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new DatasetQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     DatasetQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return DatasetQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof DatasetQuery) {
            return $criteria;
        }
        $query = new DatasetQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Dataset|Dataset[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = DatasetPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(DatasetPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Dataset A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `DATASET`, `URL`, `DESCRIPCION`, `TAGS`, `FORMATO_ID`, `COMPRESION_ID`, `CABECERAS`, `CREATED_AT` FROM `dataset` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Dataset();
            $obj->hydrate($row);
            DatasetPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Dataset|Dataset[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Dataset[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return DatasetQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(DatasetPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return DatasetQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(DatasetPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DatasetQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(DatasetPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the dataset column
     *
     * Example usage:
     * <code>
     * $query->filterByDataset('fooValue');   // WHERE dataset = 'fooValue'
     * $query->filterByDataset('%fooValue%'); // WHERE dataset LIKE '%fooValue%'
     * </code>
     *
     * @param     string $dataset The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DatasetQuery The current query, for fluid interface
     */
    public function filterByDataset($dataset = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($dataset)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $dataset)) {
                $dataset = str_replace('*', '%', $dataset);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(DatasetPeer::DATASET, $dataset, $comparison);
    }

    /**
     * Filter the query on the url column
     *
     * Example usage:
     * <code>
     * $query->filterByUrl('fooValue');   // WHERE url = 'fooValue'
     * $query->filterByUrl('%fooValue%'); // WHERE url LIKE '%fooValue%'
     * </code>
     *
     * @param     string $url The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DatasetQuery The current query, for fluid interface
     */
    public function filterByUrl($url = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($url)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $url)) {
                $url = str_replace('*', '%', $url);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(DatasetPeer::URL, $url, $comparison);
    }

    /**
     * Filter the query on the descripcion column
     *
     * Example usage:
     * <code>
     * $query->filterByDescripcion('fooValue');   // WHERE descripcion = 'fooValue'
     * $query->filterByDescripcion('%fooValue%'); // WHERE descripcion LIKE '%fooValue%'
     * </code>
     *
     * @param     string $descripcion The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DatasetQuery The current query, for fluid interface
     */
    public function filterByDescripcion($descripcion = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($descripcion)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $descripcion)) {
                $descripcion = str_replace('*', '%', $descripcion);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(DatasetPeer::DESCRIPCION, $descripcion, $comparison);
    }

    /**
     * Filter the query on the tags column
     *
     * Example usage:
     * <code>
     * $query->filterByTags('fooValue');   // WHERE tags = 'fooValue'
     * $query->filterByTags('%fooValue%'); // WHERE tags LIKE '%fooValue%'
     * </code>
     *
     * @param     string $tags The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DatasetQuery The current query, for fluid interface
     */
    public function filterByTags($tags = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($tags)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $tags)) {
                $tags = str_replace('*', '%', $tags);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(DatasetPeer::TAGS, $tags, $comparison);
    }

    /**
     * Filter the query on the formato_id column
     *
     * Example usage:
     * <code>
     * $query->filterByFormatoId(1234); // WHERE formato_id = 1234
     * $query->filterByFormatoId(array(12, 34)); // WHERE formato_id IN (12, 34)
     * $query->filterByFormatoId(array('min' => 12)); // WHERE formato_id > 12
     * </code>
     *
     * @see       filterByFormato()
     *
     * @param     mixed $formatoId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DatasetQuery The current query, for fluid interface
     */
    public function filterByFormatoId($formatoId = null, $comparison = null)
    {
        if (is_array($formatoId)) {
            $useMinMax = false;
            if (isset($formatoId['min'])) {
                $this->addUsingAlias(DatasetPeer::FORMATO_ID, $formatoId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($formatoId['max'])) {
                $this->addUsingAlias(DatasetPeer::FORMATO_ID, $formatoId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DatasetPeer::FORMATO_ID, $formatoId, $comparison);
    }

    /**
     * Filter the query on the compresion_id column
     *
     * Example usage:
     * <code>
     * $query->filterByCompresionId(1234); // WHERE compresion_id = 1234
     * $query->filterByCompresionId(array(12, 34)); // WHERE compresion_id IN (12, 34)
     * $query->filterByCompresionId(array('min' => 12)); // WHERE compresion_id > 12
     * </code>
     *
     * @see       filterByCompresion()
     *
     * @param     mixed $compresionId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DatasetQuery The current query, for fluid interface
     */
    public function filterByCompresionId($compresionId = null, $comparison = null)
    {
        if (is_array($compresionId)) {
            $useMinMax = false;
            if (isset($compresionId['min'])) {
                $this->addUsingAlias(DatasetPeer::COMPRESION_ID, $compresionId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($compresionId['max'])) {
                $this->addUsingAlias(DatasetPeer::COMPRESION_ID, $compresionId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DatasetPeer::COMPRESION_ID, $compresionId, $comparison);
    }

    /**
     * Filter the query on the cabeceras column
     *
     * Example usage:
     * <code>
     * $query->filterByCabeceras('fooValue');   // WHERE cabeceras = 'fooValue'
     * $query->filterByCabeceras('%fooValue%'); // WHERE cabeceras LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cabeceras The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DatasetQuery The current query, for fluid interface
     */
    public function filterByCabeceras($cabeceras = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cabeceras)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cabeceras)) {
                $cabeceras = str_replace('*', '%', $cabeceras);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(DatasetPeer::CABECERAS, $cabeceras, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DatasetQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(DatasetPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(DatasetPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DatasetPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query by a related Formato object
     *
     * @param   Formato|PropelObjectCollection $formato The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   DatasetQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByFormato($formato, $comparison = null)
    {
        if ($formato instanceof Formato) {
            return $this
                ->addUsingAlias(DatasetPeer::FORMATO_ID, $formato->getId(), $comparison);
        } elseif ($formato instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(DatasetPeer::FORMATO_ID, $formato->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByFormato() only accepts arguments of type Formato or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Formato relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return DatasetQuery The current query, for fluid interface
     */
    public function joinFormato($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Formato');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Formato');
        }

        return $this;
    }

    /**
     * Use the Formato relation Formato object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   FormatoQuery A secondary query class using the current class as primary query
     */
    public function useFormatoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinFormato($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Formato', 'FormatoQuery');
    }

    /**
     * Filter the query by a related Compresion object
     *
     * @param   Compresion|PropelObjectCollection $compresion The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   DatasetQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByCompresion($compresion, $comparison = null)
    {
        if ($compresion instanceof Compresion) {
            return $this
                ->addUsingAlias(DatasetPeer::COMPRESION_ID, $compresion->getId(), $comparison);
        } elseif ($compresion instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(DatasetPeer::COMPRESION_ID, $compresion->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByCompresion() only accepts arguments of type Compresion or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Compresion relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return DatasetQuery The current query, for fluid interface
     */
    public function joinCompresion($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Compresion');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Compresion');
        }

        return $this;
    }

    /**
     * Use the Compresion relation Compresion object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   CompresionQuery A secondary query class using the current class as primary query
     */
    public function useCompresionQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinCompresion($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Compresion', 'CompresionQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Dataset $dataset Object to remove from the list of results
     *
     * @return DatasetQuery The current query, for fluid interface
     */
    public function prune($dataset = null)
    {
        if ($dataset) {
            $this->addUsingAlias(DatasetPeer::ID, $dataset->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
